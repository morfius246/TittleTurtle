@using System.Text
@using Microsoft.Ajax.Utilities
@using TitleTurtle.Models
@model TitleTurtle.Models.ShowArticle


@{
    ViewBag.Title = "Show";
    Layout = "/Views/Shared/_Layout.cshtml";
}
@if (Model.CurrentArticle.MedialInArticles.Count != 0)
{
    try
    {
        <div class="bgArticle" style="background-image: url(@("data:image/jpeg;base64," + Convert.ToBase64String(Model.Article.MedialInArticles.First().Media.MediaData)))">

        </div>
    }
    catch (Exception)
    {

    }
}

    <div class="col-md-12 col" style="@(Model.CurrentArticle.MedialInArticles.Count != 0? "margin-top: 400px":"")">
        @using (Html.BeginForm("ShowArticle", "Home"))
        {
            <div>
                <h2>@Html.DisplayFor(model => model.Article.ArticleTitle)</h2>
                @Html.HiddenFor(model => model.Article.ArticleID)
                @Html.Raw(Model.Article.ArticleText)
                <br>
                <p title="@Model.Article.User.FullName"><span class="glyphicon glyphicon-user"></span> @Html.ActionLink(@Model.Article.User.Login, "ShowUser", "Account", new { id = Model.Article.UserID }, new { style = "color: black" })</p>
                <p>Дата создания: @Model.Article.Edits.ElementAt(0).Date</p>
                @if (Model.Article.Edits.Count() > 1)
                {
                    <p>
                        Дата последнего изменения:
                        @Model.Article.Edits.ElementAt(Model.Article.Edits.Count() - 1).Date
                    </p>
                }
                <div>
                    <span class="glyphicon glyphicon-thumbs-up"></span><span class="badge">@Model.Article.Ratings.ElementAt(0).RatingLike</span>
                    <span class="glyphicon glyphicon-thumbs-down"></span><span class="badge">@Model.Article.Ratings.ElementAt(0).RatingDislike</span>
                    <span class=" glyphicon glyphicon-heart-empty"></span><span class="badge">@(Model.Article.Ratings.ElementAt(0).RatingLike - Model.Article.Ratings.ElementAt(0).RatingDislike)</span>
                </div>
                <br />
                @if (User.Identity.Name != Model.Article.User.Login)
                {
                    <a href="@Url.Action("Vote", "Home", new { _id = Model.Article.ArticleID.ToString(), up = true })"><span class="glyphicon glyphicon-chevron-up"></span></a>
                    <a href="@Url.Action("Vote", "Home", new { _id = Model.Article.ArticleID.ToString(), up = false })"><span class="glyphicon glyphicon-chevron-down"></span></a>
                    <p><span class="glyphicon glyphicon-eye-open"></span> @Model.Article.Ratings.ElementAt(0).RatingView</p>
                }
            </div>
        }
        <span class='st_twitter_large' displaytext='Tweet'></span>
        <span class='st_vkontakte_large' displaytext='Vkontakte'></span>
        <span class='st_facebook_large' displaytext='Facebook'></span>
        <span class='st_livejournal_large' displaytext='LiveJournal'></span>
        <span class='st_googleplus_large' displaytext='Google +'></span>
        <div id="mainComment">
            @using (Html.BeginForm("CreateComment", "Home", FormMethod.Post))
            {
                <input type="hidden" name="currentArticle.ArticleID" value=@Model.CurrentArticle.ArticleID.ToString() />
                <input type="hidden" name="CommentList" value=@Model.CommentList />
                <input type="hidden" name="Username" value=@User.Identity.Name />
                <fieldset>
                    <p>Введите сообщение:</p>
                    @Html.TextAreaFor(model => model.NewComment.Article.ArticleText, new { @class = "form-control", rows = "3" })
                    <input type="submit" value="Отправить" name="Username" class="btn btn-primary" />
                </fieldset>
            }
        </div>
        <h3>Все записи</h3>
        <p> Всего: @Model.Article.CommentCount</p>
        <div id="comments">
            @ShowComments(Model.CommentList)
        </div>
    </div>
    <script>
        $("document").ready(function () {
            $('#comments #first').click(function (selected) {
                $("#comments #second").hide();
                $("#second[name='" + $(this).attr("name") + "']").toggle();
            });
            $('#comments #branchclose').click(function (selected) {
                $(this).text($(this).text() == "Развернуть ветку" ? "Свернуть ветку" : "Развернуть ветку");
                $("#children[name='" + $(this).attr("name") + "']").toggle();
            });
        });
    </script>
    <style>
        #comments #second {
            display: none;
        }
    </style>
    @helper ShowComments(IEnumerable<TitleTurtle.Models.ShowArticle> sal)
{
    foreach (var item in sal)
    {
        <div class="well well-sm" id=@("comment"+item.Article.ArticleID)>
            <p>
                @Html.ActionLink("#" + item.Article.ArticleID, "ShowArticle/" + item.Article.ArticleID.ToString())
                Добавил <a href="@Url.Action("ShowUser", "Account", new{id = item.Article.UserID})">@item.Article.User.Login</a>
                @Ago(item.Article.Edits.First().Date)
            </p>
            <p>@item.Article.ArticleText</p>
            <p>
                @if (User.IsInRole("RegUser") || User.IsInRole("Admin") || User.IsInRole("Author"))
                {
                    <a class="btn btn-default" id="first" name=@("subpost"+item.Article.ArticleID)>Ответить</a>
                }
                <div>
                    @if (User.Identity.Name != item.Article.User.Login)
                    {
                        <a href="@Url.Action("Vote", "Home", new { _id = item.Article.ArticleID.ToString(), up = true })"><span class="glyphicon glyphicon-chevron-up"></span></a>
                        <a href="@Url.Action("Vote", "Home", new { _id = item.Article.ArticleID.ToString(), up = false })"><span class="glyphicon glyphicon-chevron-down"></span></a>
                    }
                </div>
                <div>
                    <span class="glyphicon glyphicon-thumbs-up"></span><span class="badge">@item.Article.Ratings.ElementAt(0).RatingLike</span>
                    <span class="glyphicon glyphicon-thumbs-down"></span><span class="badge">@item.Article.Ratings.ElementAt(0).RatingDislike</span>
                    <span class=" glyphicon glyphicon-heart-empty"></span><span class="badge">@(item.Article.Ratings.ElementAt(0).RatingLike - item.Article.Ratings.ElementAt(0).RatingDislike)</span>
                </div>
            </p>
            @if (item.Article.CommentCount > 0)
            {
                <span class="badge">@item.Article.CommentCount</span>
                <a class="btn btn-link" id="branchclose" name=@("branchclose"+item.Article.ArticleID)>Свернуть ветку</a>
            }
        </div>
        <div id="second" name=@("subpost" + item.Article.ArticleID)>
            @using (Html.BeginForm("CreateComment", "Home", FormMethod.Post))
            {
                <input type="hidden" name="currentArticle.ArticleID" value=@item.Article.ArticleID />
                <input type="hidden" name="CommentList" value=@Model.CommentList />
                <input type="hidden" name="Username" value=@User.Identity.Name />
                <fieldset>
                    <p>Введите сообщение:</p>
                    @Html.TextAreaFor(model => model.NewComment.Article.ArticleText, new { @class = "form-control", rows = "3" })
                    <input type="submit" value="Отправить" name="Username" class="btn btn-primary" />
                </fieldset>
            }
        </div>
        if (item.CommentList != null)
        {
            <div style="margin-left: 30px" id="children" name=@("branchclose" + item.Article.ArticleID)>
                @ShowComments(item.CommentList)
            </div>
        }
    }
}
    @helper  Ago(DateTime added)
{
    //DateTime added = item.Article.Edits.First().Date;
    var ago = DateTime.Now - added;
    var agoString = new StringBuilder();
    if (ago.TotalDays >= 2)
    {
        agoString.Append((int)ago.TotalDays + " дней назад");
    }
    else if (ago.TotalDays >= 1)
    {
        agoString.Append((int)ago.TotalDays + " день " + (int)ago.TotalHours % 24 + " часов назад");
    }
    else if (ago.TotalHours >= 2)
    {
        agoString.Append((int)ago.TotalHours + " часов назад");
    }
    else if (ago.TotalHours > 1)
    {
        agoString.Append((int)ago.TotalHours + " час " + (int)ago.TotalMinutes % 60 + " минут назад");
    }
    else if (ago.TotalMinutes >= 20)
    {
        agoString.Append((int)ago.TotalMinutes + " минуты назад");
    }
    else if (ago.TotalMinutes >= 1)
    {
        agoString.Append((int)ago.TotalMinutes + " минут " + (int)ago.TotalSeconds % 60 + " секунд назад");
    }
    else if (ago.TotalSeconds >= 30)
    {
        agoString.Append((int)ago.TotalSeconds + " секунд назад");
    }
    else
    {
        agoString.Append("только что");
    }
    @agoString.ToString()
}